<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多线程创建使用</title>
      <link href="/2020/04/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/04/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-线程与进程"><a href="#1-线程与进程" class="headerlink" title="1.线程与进程"></a>1.线程与进程</h2><p>程序：是指一段静态(没有加载，在硬盘的代码)的代码，静态的对象。</p><p><strong>线程</strong>：每个线程有自己独立的堆和程序计数器。当一个程序进入内存运行时，内部可能包含了多个顺序执行流，每个顺序执行流就是一个线程。有一定独立的功能，是分配和调度的一个独立单位，<strong>一个进程的多个线程共享相同的内存单元/内存地址空间，可以同时访问堆，变量，多以多个线程共享资源会造成安全隐患。</strong></p><p><strong>进程</strong>：每一个运行中的程序就是一个进程。</p><p><strong>并行</strong>：同一时刻多条指令在多个处理器上同时执行。</p><p><strong>并发</strong>：一个进程同时执行多个线程。</p><p>在一个java程序中至少有三个线程：main主线程，gc垃圾回收线程，异常处理线程，出异常会影响，主线程。</p><p>多线程的优点：</p><p>​    进程之间不能共享内存，线程之间可以共享内存</p><p>​    多线程来实现多任务并发比多线程的效率高（提高cpu利用率）</p><p>​    独立运行，易于理解和修改</p><h2 id="2-线程的创建和启动"><a href="#2-线程的创建和启动" class="headerlink" title="2.线程的创建和启动"></a>2.线程的创建和启动</h2><h3 id="方式一：继承Thread类创建线程类"><a href="#方式一：继承Thread类创建线程类" class="headerlink" title="方式一：继承Thread类创建线程类"></a>方式一：继承Thread类创建线程类</h3><p>1.第一Thread类的子类，重写该类的run()方法，该run方法的方法体就代表了线程需要完成的任务。</p><p>2.创建Thread子类的实例，创建线程对象。</p><p>3.调用线程对象的start()方法来调用该线程。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.创建一个类继承Thread</span><span class="token keyword">class</span> <span class="token class-name">OneCreateThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.重写run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.调用创建的线程对象并start</span>        Thread t1 <span class="token operator">=</span>  <span class="token keyword">new</span>  <span class="token class-name">OneCreateThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//t1.start();当需要再调一次该线程时。当需要多个线程时要造多个对象</span>        Thread t2 <span class="token operator">=</span>  <span class="token keyword">new</span>  <span class="token class-name">OneCreateThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Thread中的常用方法："><a href="#Thread中的常用方法：" class="headerlink" title="Thread中的常用方法："></a>Thread中的常用方法：</h3><pre><code>1. **start(): 启动当前线程：调用当前该线程的run()；** 2. **run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中** 3. currentThread();静态方法，返回执行当前代码的线程。 4. getName();获取当前线程的名字 5. setName();设置当前线程的名字 6. **yield():释放当前cpu的执行权(cpu重新调度,可能还会将执行权分配给自己)** 7. **join():在线程a中调用线程b的join()，此时线程a就进入阻塞状态，知道线程b完全执行结束，线程a才结束阻塞状态(插队)。** 8. stop():当执行此方法时，强制结束当前线程。 9. **sleep(long milltime);让当前线程“睡眠”指定milltime毫秒，在指定的毫秒内当前线程时阻塞状态** 10. isAlive():判断当前线程是否存活。 11. **setPriority()：设置优先级**</code></pre><h2 id="线程的优先级："><a href="#线程的优先级：" class="headerlink" title="线程的优先级："></a>线程的优先级：</h2><pre><code>class OneCreateThread extends Thread{    @Override    public void run() {        for (int i = 0; i &lt;100000 ; i++) {            if(i % 2 == 0){                System.out.println(Thread.currentThread().getName() +" "+ i);            }        }    }}public class CreateThread {    public static void main(String[] args) {        Thread t1 =  new  OneCreateThread();        //设置优先级        t1.setPriority(Thread.MAX_PRIORITY);        t1.start();        Thread.currentThread().setPriority(1);        for (int i = 0; i &lt;100000; i++) {            if(i % 2 != 0){                System.out.println(i+" " + "run");            }        }    }}</code></pre><p><strong>改线程名要在start前执行</strong></p><p><img src="/2020/04/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/01.png" alt></p><p><strong>总结：</strong>当设置了优先级是CPU调度时调度到该线程的概率变大，并不是先该线程你执行。</p><h3 id="方式二：用Runnable接口实现创建线程"><a href="#方式二：用Runnable接口实现创建线程" class="headerlink" title="方式二：用Runnable接口实现创建线程"></a>方式二：用Runnable接口实现创建线程</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.创建一个类实现runnable(匿名类也行)</span><span class="token keyword">class</span> <span class="token class-name">SubThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//2.实现run方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateRunnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.创建实现类的对象</span>        SubThread subThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.将参数放进Thread</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>subThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.通过start启动线程</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="疑问？调用Thread的start为什么会执行SubThread的run方法呢"><a href="#疑问？调用Thread的start为什么会执行SubThread的run方法呢" class="headerlink" title="疑问？调用Thread的start为什么会执行SubThread的run方法呢?"></a>疑问？调用Thread的start为什么会执行SubThread的run方法呢?</h3><p>以下时Thread 通过start调用的的run方法。</p><pre><code>private Runnable target;public void run() {    if (target != null) {        target.run();    }}</code></pre><p>通过分析源码不难发现当传入的值是runnable类型是，通过start调用的run方法，其实是调用的是runnable的run()方法</p><h3 id="Runnable和Thread的区别："><a href="#Runnable和Thread的区别：" class="headerlink" title="Runnable和Thread的区别："></a>Runnable和Thread的区别：</h3><p><a href="https://blog.csdn.net/zhaojianting/article/details/97664370" target="_blank" rel="noopener">https://blog.csdn.net/zhaojianting/article/details/97664370</a></p><h3 id="为什么会出现线程安全问题？"><a href="#为什么会出现线程安全问题？" class="headerlink" title="为什么会出现线程安全问题？"></a>为什么会出现线程安全问题？</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//此处的睡眠是为了增大出错的概率</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"票号为："</span> <span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Test01 test01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>test01<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>test01<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>test01<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"售票处1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"售票处2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"售票处3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>结果：<img src="/2020/04/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/02.png" style="zoom:80%;"></p><p>当多个线程同时访问一个数据源时。</p><pre><code>当count等于100        t1线程抢到cpu分配的权        进入睡眠        释放cpu权count还是1         t3抢到cpu分配权                进入睡眠        释放cpu权count还是1         t2抢到cpu分配权                进入睡眠        释放cpu权t1睡眠时间到           count-1                                    count  = 0                        t3睡眠时间到           count-1                                    count  = -1t2睡眠时间到           count-1                                    count  = -2</code></pre><hr><p><strong>结论：当某个线程操作过程中，尚未操作完成时，其他线程参与进来，也操作车票。</strong></p><p><strong>当多个线程同时读写同一份共享资源的时候,可能会引起冲突</strong></p><p><strong>此时就应该加上同步锁解决问题</strong></p><hr><h2 id="解决线程同步安全"><a href="#解决线程同步安全" class="headerlink" title="解决线程同步安全"></a>解决线程同步安全</h2><h3 id="方式一：同步代码块"><a href="#方式一：同步代码块" class="headerlink" title="方式一：同步代码块"></a>方式一：同步代码块</h3><p><strong>实现Runnable：</strong></p><pre><code>synchronized(同步锁){    //需要被同步的代码}说明：1.操作共享数据的代码，就是需要被同步的代码     2.共享数据：多个线程共同操作的变量。比如：count就是共享数据。     3.同步监视器，锁，任何一个类的对象，都可以充当锁。要求多个线程必须要共用同一把锁。</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//新添加</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"票号为："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Test01 test01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>test01<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>test01<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>test01<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"售票处1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"售票处2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"售票处3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>继承Thread：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">test02</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使多个线程公用一个count</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//因为同步监视器需要唯一的对象，所以使用当前类加载</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>ThreadTest02<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        test02 test02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test02 test03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test03<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="/2020/04/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/03.png" style="zoom: 67%;"><p><strong>结论：</strong></p><ul><li><p><strong>在实现Runnable接口创建多线程中，锁可以用this。</strong></p></li><li><p><strong>在继承Thread类创建多线程中，慎用this，可以用类加载(类也是对象Class的对象)</strong></p></li><li><p><strong>当有一个线程拿到锁就可以执行同步的内容，其他的只能等待。</strong></p></li><li><p><strong>解决了线程的安全问题</strong></p></li><li><p><strong>但是在同步代码块内，变成了单线程的过程，效率变低了。</strong></p></li></ul><h3 id="方式二：同步方法锁"><a href="#方式二：同步方法锁" class="headerlink" title="方式二：同步方法锁"></a>方式二：同步方法锁</h3><p><strong>Runnable：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新添加</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//新添加</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//为了示例将改内容抽为方法,只要将其方法用synchronized即可</span>    <span class="token comment" spellcheck="true">//因为show是this调用的。</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"票号为："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Thread：</strong></p><pre><code>    //使多个线程公用一个count    private static int count = 100;    @Override    public void run() {        while (true){            //因为同步监视器需要唯一的对象，所以使用当前类加载               show();        }    }    //当多个线程调用，当前前类是否唯一    private static synchronized void show() {        if (count &gt; 0) {            try {                sleep(100);            } catch (InterruptedException e) {                e.printStackTrace();            }            System.out.println(Thread.currentThread().getName() + " " + count);            count--;        }     }}</code></pre><p>非静态同步方法：同步监视器是：this。</p><p>静态同步方法：同步监视器是：当前类本身。</p><h3 id="方式三：Lock锁"><a href="#方式三：Lock锁" class="headerlink" title="方式三：Lock锁"></a>方式三：Lock锁</h3><p>lock是一个接口(使用ReentrantLock)</p><pre><code>class lock1 implements Runnable{    private int count = 100;    //第一步实例化ReentrantLock对象    Lock lock = new ReentrantLock();    @Override    public void run() {        while(true){            try {                //2.调用lock()获取锁                lock.lock();                if (count &gt; 0) {                    System.out.println(Thread.currentThread().getName() + " " + count);                    count--;                } else {                    break;                }            }finally {                //3.调用lock释放锁                lock.unlock();            }        }    }}public class lockTest {    public static void main(String[] args) {        lock1 lock1 = new lock1();        Thread thread = new Thread(lock1);        Thread thread1 = new Thread(lock1);        thread.start();        thread1.start();    }}</code></pre><p><strong>synchronized与lock的区别</strong></p><p><strong>相同：</strong>都可以解决线程同步问题</p><p><strong>不同：</strong>synchronized在执行完同步代码块之后，自动释放同步监视器(锁),lock需要手动的开启同步，手动关闭。</p><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">mes</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//因为释放线程锁其他线程会进入</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//调用notify会唤醒阻塞的线程，就形成了一个通信</span>                object<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//当调用wait方法时，会释放线程锁</span>                        object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻塞</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>说明：</strong></p><ul><li><p>wait(),notify(),notifyAll()三个方法必须使用在同步代码块中</p></li><li><p>wait(),notify(),notifyAll()三个方法调用者必须是同步代码块或者同步方法中的同步监视器。</p></li></ul><h3 id="sleep-和wait的区别？-重点"><a href="#sleep-和wait的区别？-重点" class="headerlink" title="sleep()和wait的区别？(重点)"></a><strong>sleep()和wait的区别？(重点)</strong></h3><p><strong>相同点：</strong>一旦调用就会进入阻塞状态。</p><p><strong>不同点：</strong> 1.sleep和wait的声明位置不同，Thread类中声明sleep(),Object中声明wait();</p><p>​                2.调用要求，wait()调用者必须是同步代码块或者同步方法中的同步监视器,sleep任何情况都可以调用。</p><p>​                3.sleep不会释放锁，wait会释放锁。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处 * 取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图 * 生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通 * 知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如 * 果店中有产品了再通知消费者来取走产品。 * @author myq * @create 2020-04-22 21:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Clerk clerk <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Producer p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产者1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费者1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 生产者 */</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始生产"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                clerk<span class="token punctuation">.</span><span class="token function">shengcan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 消费者 */</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始消费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                clerk<span class="token punctuation">.</span><span class="token function">xiaofei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 店员 */</span><span class="token keyword">class</span> <span class="token class-name">Clerk</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">shengcan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始生产第"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"个食品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当生产者，有商品时就可以唤醒消费者</span>            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">xiaofei</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":开始消费第"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"个食品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">--</span> <span class="token punctuation">;</span>            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="方式三：实现Callable创建线程"><a href="#方式三：实现Callable创建线程" class="headerlink" title="方式三：实现Callable创建线程"></a>方式三：实现Callable创建线程</h2><pre><code>class myCall implements Callable&lt;Integer&gt; {    private int count = 0;    @Override    public Integer call() throws Exception {        while (true){            if(count&lt;=100){                System.out.println(count);                count++;            }else {                break;            }        }        return count;    }}public class Call {    public static void main(String[] args) {        myCall myCall = new myCall();        FutureTask&lt;Integer&gt; future = new FutureTask&lt;Integer&gt;(myCall);        new Thread(future).start();        try {            //获取返回值            Integer integer = future.get();            System.out.println("和为："+ integer.intValue());        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            e.printStackTrace();        }    }}</code></pre><p><a href="https://blog.csdn.net/weixin_42606135/article/details/81282736" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42606135/article/details/81282736</a></p><p>Callable的优点：</p><p>call()可以有返回值，可以抛出异常，call支持异常。</p><h2 id="方式四：关于线程池，创建线程"><a href="#方式四：关于线程池，创建线程" class="headerlink" title="方式四：关于线程池，创建线程"></a>方式四：关于线程池，创建线程</h2><p><a href="https://www.jianshu.com/p/7726c70cdc40" target="_blank" rel="noopener">https://www.jianshu.com/p/7726c70cdc40</a></p><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p><a href="https://blog.csdn.net/weixin_42606135/article/details/81282736" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42606135/article/details/81282736</a></p><p><a href="https://blog.csdn.net/zhaojianting/article/details/97664370" target="_blank" rel="noopener">https://blog.csdn.net/zhaojianting/article/details/97664370</a></p><p><a href="https://www.bilibili.com/video/BV1zE41197bw?t=7&amp;p=37" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1zE41197bw?t=7&amp;p=37</a></p><p><a href="https://www.jianshu.com/p/7726c70cdc40" target="_blank" rel="noopener">https://www.jianshu.com/p/7726c70cdc40</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JAVA进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVASE </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA操作</title>
      <link href="/2020/04/21/IDEA%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/04/21/IDEA%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="IDEA基本配置操作："><a href="#IDEA基本配置操作：" class="headerlink" title="IDEA基本配置操作："></a>IDEA基本配置操作：</h2><hr><h3 id="1-设置IDEA鼠标悬停-提示注释"><a href="#1-设置IDEA鼠标悬停-提示注释" class="headerlink" title="1.设置IDEA鼠标悬停(提示注释)"></a>1.设置IDEA鼠标悬停(提示注释)</h3><p><img src="/2020/04/21/IDEA%E6%93%8D%E4%BD%9C/01.png" alt=""></p><h3 id="2-设置自动导包"><a href="#2-设置自动导包" class="headerlink" title="2.设置自动导包"></a>2.设置自动导包</h3><p><img src="/2020/04/21/IDEA%E6%93%8D%E4%BD%9C/02.png" alt=""></p><h3 id="3-设置方法之间的分隔符"><a href="#3-设置方法之间的分隔符" class="headerlink" title="3.设置方法之间的分隔符"></a>3.设置方法之间的分隔符</h3><p><img src="/2020/04/21/IDEA%E6%93%8D%E4%BD%9C/03.png" alt=""></p><h3 id="4-当数据源多时-多把数据源输出-多行效率高"><a href="#4-当数据源多时-多把数据源输出-多行效率高" class="headerlink" title="4.当数据源多时(多把数据源输出,多行效率高)"></a>4.当数据源多时(多把数据源输出,多行效率高)</h3><p><img src="/2020/04/21/IDEA%E6%93%8D%E4%BD%9C/04.png" alt=""></p><h3 id="5-修改类头的文档注释信息"><a href="#5-修改类头的文档注释信息" class="headerlink" title="5.修改类头的文档注释信息"></a><strong>5.修改类头的文档注释信息</strong></h3><p><img src="/2020/04/21/IDEA%E6%93%8D%E4%BD%9C/05.png" alt=""></p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>PACKAGE_NAME<span class="token punctuation">}</span> <span class="token operator">-</span> the name of the target <span class="token keyword">package</span> where the <span class="token keyword">new</span> <span class="token class-name">class</span> or <span class="token keyword">interface</span> <span class="token class-name">will</span> be created<span class="token punctuation">.</span> $<span class="token punctuation">{</span>PROJECT_NAME<span class="token punctuation">}</span> <span class="token operator">-</span> the name of the current project<span class="token punctuation">.</span> $<span class="token punctuation">{</span>FILE_NAME<span class="token punctuation">}</span> <span class="token operator">-</span> the name of the PHP file that will be created<span class="token punctuation">.</span> $<span class="token punctuation">{</span>NAME<span class="token punctuation">}</span> <span class="token operator">-</span> the name of the <span class="token keyword">new</span> <span class="token class-name">file</span> which you specify in the New <span class="token class-name">File</span> dialog box during the file creation<span class="token punctuation">.</span> $<span class="token punctuation">{</span>USER<span class="token punctuation">}</span> <span class="token operator">-</span> the login name of the current user<span class="token punctuation">.</span> $<span class="token punctuation">{</span>DATE<span class="token punctuation">}</span> <span class="token operator">-</span> the current system date<span class="token punctuation">.</span> $<span class="token punctuation">{</span>TIME<span class="token punctuation">}</span> <span class="token operator">-</span> the current system time<span class="token punctuation">.</span> $<span class="token punctuation">{</span>YEAR<span class="token punctuation">}</span> <span class="token operator">-</span> the current year<span class="token punctuation">.</span> $<span class="token punctuation">{</span>MONTH<span class="token punctuation">}</span> <span class="token operator">-</span> the current month<span class="token punctuation">.</span> $<span class="token punctuation">{</span>DAY<span class="token punctuation">}</span> <span class="token operator">-</span> the current day of the month<span class="token punctuation">.</span> $<span class="token punctuation">{</span>HOUR<span class="token punctuation">}</span> <span class="token operator">-</span> the current hour<span class="token punctuation">.</span> $<span class="token punctuation">{</span>MINUTE<span class="token punctuation">}</span> <span class="token operator">-</span> the current minute<span class="token punctuation">.</span> $<span class="token punctuation">{</span>PRODUCT_NAME<span class="token punctuation">}</span> <span class="token operator">-</span> the name of the IDE in which the file will be created<span class="token punctuation">.</span> $<span class="token punctuation">{</span>MONTH_NAME_SHORT<span class="token punctuation">}</span> <span class="token operator">-</span> the first <span class="token number">3</span> letters of the month name<span class="token punctuation">.</span> Example<span class="token operator">:</span> Jan<span class="token punctuation">,</span> Feb<span class="token punctuation">,</span> etc<span class="token punctuation">.</span> $<span class="token punctuation">{</span>MONTH_NAME_FULL<span class="token punctuation">}</span> <span class="token operator">-</span> full name of a month<span class="token punctuation">.</span> Example<span class="token operator">:</span> January<span class="token punctuation">,</span> February<span class="token punctuation">,</span> etc<span class="token punctuation">.</span></code></pre><h3 id="6-更改字符集-必须"><a href="#6-更改字符集-必须" class="headerlink" title="6.更改字符集(必须)"></a>6.更改字符集(必须)</h3><p><img src="/2020/04/21/IDEA%E6%93%8D%E4%BD%9C/06.png" alt=""></p><h3 id="7-设置自动编译"><a href="#7-设置自动编译" class="headerlink" title="7.设置自动编译"></a>7.设置自动编译</h3><p><img src="/2020/04/21/IDEA%E6%93%8D%E4%BD%9C/07.png" alt=""></p><h3 id="8-模板-代码更加便捷"><a href="#8-模板-代码更加便捷" class="headerlink" title="8.模板(代码更加便捷)"></a>8.模板(代码更加便捷)</h3><p><img src="/2020/04/21/IDEA%E6%93%8D%E4%BD%9C/09.png" alt=""></p><hr><h2 id="IDEA快捷键："><a href="#IDEA快捷键：" class="headerlink" title="IDEA快捷键："></a>IDEA快捷键：</h2><h3 id="1-设置快捷键与XXX一样"><a href="#1-设置快捷键与XXX一样" class="headerlink" title="1.设置快捷键与XXX一样"></a>1.设置快捷键与XXX一样<img src="/2020/04/21/IDEA%E6%93%8D%E4%BD%9C/08.png" alt=""></h3><h3 id="2-基本快捷键"><a href="#2-基本快捷键" class="headerlink" title="2.基本快捷键"></a>2.基本快捷键</h3><table><thead><tr><th><strong>快捷键</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td>Ctrl + F</td><td>在当前文件进行文本查找 <code>（必备）</code></td></tr><tr><td>Ctrl + R</td><td>在当前文件进行文本替换 <code>（必备）</code></td></tr><tr><td>Ctrl + Y</td><td>删除光标所在行 或 删除选中的行 <code>（必备）</code></td></tr><tr><td>Ctrl + D</td><td>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 <code>（必备）</code></td></tr><tr><td>Ctrl + N</td><td>根据输入的 <strong>类名</strong> 查找类文件</td></tr><tr><td>Ctrl + W</td><td>选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td></tr><tr><td>Ctrl + /</td><td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + F</td><td>根据输入内容查找整个项目 或 指定目录内文件 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + R</td><td>根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + J</td><td>自动将下一行合并到当前行末尾 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + Z</td><td>取消撤销 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + T</td><td>对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td></tr><tr><td>F2</td><td>跳转到下一个高亮错误 或 警告位置 <code>（必备）</code></td></tr><tr><td>ctrl + x</td><td>删除当前列</td></tr><tr><td>ctrl + p</td><td>NEW实例时查看构造器的参数</td></tr><tr><td>ctrl + q</td><td>查看方法的详细信息</td></tr><tr><td>shfit + t</td><td>更改文件名</td></tr><tr><td>Ctrl＋Alt＋T</td><td>可以将代码包在一块内，例如try/catch</td></tr><tr><td>Ctrl + Alt + L</td><td>格式化代码</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件设置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter</title>
      <link href="/2020/04/21/Filter/"/>
      <url>/2020/04/21/Filter/</url>
      
        <content type="html"><![CDATA[<h2 id="1-filter有什么作用？"><a href="#1-filter有什么作用？" class="headerlink" title="1.filter有什么作用？"></a>1.filter有什么作用？</h2><ul><li><p>Filter也称之为过滤器，它是Servlet技术中最实用的技术，Web开发人员通过Filter技术，对web服务器管理的所有web资源。</p></li><li><p>例如实现URL级别的权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。例如对Jsp, Servlet, 静态图片文件或静态 html 文件等进行拦截，从而实现一些特殊的功能。</p></li><li><p>它主要用于对用户请求进行预处理，也可以对HttpServletResponse进行后处理。使用Filter的完整流程：Filter对用户请求进行预处理，接着将请求交给Servlet进行处理并生成响应，最后Filter再对服务器响应进行后处理。</p></li></ul><p><img src="/2020/04/21/Filter/01.png" alt></p><h2 id="2-Filter的生命周期"><a href="#2-Filter的生命周期" class="headerlink" title="2.Filter的生命周期"></a>2.Filter的生命周期</h2><ul><li><p>和我们编写的Servlet程序一样，Filter的创建和销毁由WEB服务器负责。 web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作</p></li><li><p>filter对象只会创建一次，init方法也只会执行一次。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</p></li><li><p>这个方法完成实际的过滤操作。当客户请求访问与过滤器关联的URL的时候，Servlet过滤器将先执行doFilter方法。FilterChain参数用于访问后续过滤器。</p></li><li><p>Filter对象创建后会驻留在内存e799bee5baa6e79fa5e98193e78988e69d8331333431346339，当web应用移除或服务器停止时才销毁。在Web容器卸载 Filter 对象之前被调用。该方法在Filter的生命周期中仅执行一次。在这个方法中，可以释放过滤器使用的资源。</p></li></ul><p>模拟用户登录</p><pre class=" language-bash"><code class="language-bash">当用户需要访问filter配置过的路径时，需要判断是否成立，成立条件就是用servlet判断用户名是否正确filter通过查看用户名是否正确来判断权限的开放。</code></pre><h2 id="3-Filter的特点"><a href="#3-Filter的特点" class="headerlink" title="3.Filter的特点"></a>3.Filter的特点</h2><p>​    多个filter过滤器的特点：</p><p>​    1.所有的filter都执行在同一个线程中（默认）。</p><p>​    2.共享一个request对象</p><p>​    filterchain.dofilter()方法的作用</p><p>​        1.执行下一个filter过滤器（如果有的情况下）</p><p>​        2.执行目标资源</p><p>​    在多个filter指向同一个目标源时，他们的优先顺序时在xml里的配置顺序</p><p><img src="/2020/04/21/Filter/03.png" alt></p><h2 id="4-Fileter的配置如下"><a href="#4-Fileter的配置如下" class="headerlink" title="4.Fileter的配置如下"></a>4.Fileter的配置如下</h2><pre><code> &lt;filter&gt;        &lt;filter-name&gt;helloFilter&lt;/filter-name&gt;        &lt;filter-class&gt;cn.myq.filter.HelloFilter&lt;/filter-class&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;helloFilter&lt;/filter-name&gt;            &lt;!--            当访问该目录下的任何一个文件时调用，HelloFilter程序            判断权限是否开放            --&gt;        &lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;</code></pre><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p><a href="https://zhidao.baidu.com/question/471427755.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/471427755.html</a></p><p><a href="http://www.atguigu.com/" target="_blank" rel="noopener">http://www.atguigu.com/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用</title>
      <link href="/2020/04/20/Hexo%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/04/20/Hexo%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-首先去安装nodejs（官网nodejs-org）"><a href="#1-首先去安装nodejs（官网nodejs-org）" class="headerlink" title="1.首先去安装nodejs（官网nodejs.org）"></a>1.首先去安装nodejs（官网nodejs.org）</h2><p><img src="/2020/04/20/Hexo%E4%BD%BF%E7%94%A8/01.png" alt="01"></p><p><strong>安装：</strong>一直next到底即可</p><pre class=" language-bash"><code class="language-bash">查看是否安装成功查看node的版本node -v查看包管理器版本<span class="token function">npm</span> -v</code></pre><h2 id="2-并生成博客"><a href="#2-并生成博客" class="headerlink" title="2.并生成博客"></a>2.并生成博客</h2><pre class=" language-bash"><code class="language-bash">第二步：安装hexo框架（用淘宝源安装）安装cnpm<span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org查看cnpm是否安装好cnpm -v安装hexo博客cnpm <span class="token function">install</span> -g hexo-cli查看hexo是否安装好hexo -v随意目录创建一个文件夹K（过程中出现错误直接干掉）生成博客<span class="token function">sudo</span> hexo init启动hexo s创建一个博客hexo new <span class="token string">"文章名"</span></code></pre><h2 id="3-将本地资源存放在远端的服务器上（免费的）"><a href="#3-将本地资源存放在远端的服务器上（免费的）" class="headerlink" title="3.将本地资源存放在远端的服务器上（免费的）"></a>3.将本地资源存放在远端的服务器上（免费的）</h2><p><img src="/2020/04/20/Hexo%E4%BD%BF%E7%94%A8/02.png" alt="02"></p><h2 id="4-githubssh公钥设置"><a href="#4-githubssh公钥设置" class="headerlink" title="4.githubssh公钥设置"></a>4.githubssh公钥设置</h2><ul><li>首先下载一个git软件</li></ul><p>​    <strong>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></strong></p><ul><li><p>一样一直next</p></li><li><p>配置用户名和邮箱</p></li></ul><pre class=" language-bash"><code class="language-bash">查看git用户配置<span class="token function">git</span> config user.name查看git邮箱配置<span class="token function">git</span> config user.email配置git用户<span class="token function">git</span> config --global user.name <span class="token string">"你的名字"</span>配置git邮箱<span class="token function">git</span> config --global user.email <span class="token string">"你的邮箱"</span>获取ssh公钥<span class="token function">cat</span> ~/.ssh/id_rsa.pub</code></pre><ul><li>设置github公钥</li></ul><p><img src="/2020/04/20/Hexo%E4%BD%BF%E7%94%A8/04.png" alt></p><h2 id="5-装一个git的插件"><a href="#5-装一个git的插件" class="headerlink" title="5.装一个git的插件"></a>5.装一个git的插件</h2><pre class=" language-bash"><code class="language-bash">中途报的错误不用管cnpm <span class="token function">install</span> --save hexo-deployer-git</code></pre><p><strong>并修改文件名K下的_config.yml</strong></p><p><img src="/2020/04/20/Hexo%E4%BD%BF%E7%94%A8/03.png" alt></p><p>最后：</p><pre><code>hexo d 部署到远端第一次部署，中途会出现让你登录github的窗口会让你输入github账号密码，最后推送完成</code></pre><p>​                                                                                <strong>修改主题不做赘述</strong></p><h2 id="6-修改玩主题需要重新生成"><a href="#6-修改玩主题需要重新生成" class="headerlink" title="6.修改玩主题需要重新生成"></a>6.修改玩主题需要重新生成</h2><pre class=" language-bash"><code class="language-bash">清除克隆hexo clean重新生成一下hexo g上传到githubhexo d</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 玩物搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/19/hello-world/"/>
      <url>/2020/04/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
